{"remainingRequest":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\src\\components\\mainView\\Working.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\src\\components\\mainView\\Working.vue","mtime":1580541503979},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFsaWduQ2VudGVyIHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKfQoubWFpbldvcmtpbmd7CiAgICB3aWR0aDogMTUlOwogICAgaGVpZ2h0OiA1MCU7CiAgICBsZWZ0OiAxNXB4OwogICAgdG9wOiA1MCU7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICBib3JkZXI6IDFweCBzb2xpZCBncmF5Owp9Cg=="},{"version":3,"sources":["Working.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Working.vue","sourceRoot":"src/components/mainView","sourcesContent":["<template>\r\n    <div class=\"mainWorking\">\r\n        <div class=\"alignCenter\">\r\n            <Clock></Clock>\r\n            출근시간:{{this.working.workingIn}}<br>\r\n            퇴근시간:{{this.working.workingOut}}<br>\r\n            근무시간:{{this.working.workingTime}}<br>\r\n            <button v-if=\"!this.working.workingIn\" v-on:click=\"saveWorkingIn()\"\r\n                    class=\"btn btn-outline-danger btn-working\">출근\r\n            </button>\r\n            <button v-else class=\"btn btn-danger disabled\">출근</button>\r\n\r\n            <button v-if=\"!this.working.workingOut\" v-on:click=\"saveWorkingOut()\"\r\n                    class=\"btn btn-outline-info btn-working\">퇴근\r\n            </button>\r\n            <button v-else class=\"btn btn-info disabled\">퇴근</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import http from \"../../http-common\";\r\n    import Clock from \"../working/Clock\";\r\n\r\n    export default {\r\n        name: \"WorkingSubMenu\",\r\n        data() {\r\n            return {\r\n                working: {\r\n                    empId: \"\",\r\n                    workingDate: \"\",\r\n                    workingIn: \"\",\r\n                    workingOut: \"\",\r\n                    workingTime: \"\",\r\n                }\r\n            };\r\n        },// End - data\r\n        components: {\r\n            Clock: Clock\r\n        },\r\n        methods: {\r\n            /* eslint-disable no-console */\r\n            readWorkingToday() {//당일에 출퇴근기록이 있으면 불러온다, mounted()때 호출되는 메소드.\r\n                http\r\n                    .get(\"/working/readToday/\" + this.working.empId)\r\n                    .then(response => {\r\n                        this.working = response.data;\r\n                        console.log(\"read\" + response.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                    });\r\n            },// End - readWorkingToday()\r\n            saveWorkingIn() {// 출근시 출근 시간을 DB에 저장하기 위한 메소드\r\n                http\r\n                    .get(\"/working/saveIn/\" + this.working.empId)\r\n                    .then(response => {\r\n                        this.working.workingIn = response.data;\r\n                        console.log(response.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                    });\r\n            },// End - saveWorkingIn()\r\n            saveWorkingOut() {// 퇴근 시 퇴근 시간을 DB에 저장하기 위한 메소드\r\n                http\r\n                    .get(\"/working/saveOut/\" + this.working.empId)\r\n                    .then(response => {\r\n                        this.working.workingOut = response.data;\r\n                        console.log(response.data);\r\n                        this.calcWorkingTime();\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                    });\r\n            },// End - saveWorkingOut()\r\n            saveWorkingTime() {// 총 근무 시간을 DB에 저장하기 위한 메소드\r\n                http\r\n                    .get(\"/working/saveTime/\" + this.working.empId + \"?time=\" + this.working.workingTime)\r\n                    .then(response => {\r\n                        this.working.workingTime = response.data;\r\n                        console.log(response.data);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                    });\r\n            },// End - saveWorkingTime()\r\n            calcWorkingTime() {// 총 근무 시간을 계산하는 메소드\r\n                let wit = new Date(Date.parse(\"0001-01-01 \" + this.working.workingIn));// 출근시간을 Date형으로 형변환\r\n                let wot = new Date(Date.parse(\"0001-01-01 \" + this.working.workingOut));// 퇴근시간을 Date형으로 형변환\r\n\r\n                wot.setHours(wot.getHours() - wit.getHours());// 시 부분끼리 연산\r\n                wot.setMinutes(wot.getMinutes() - wit.getMinutes());// 분 부분끼리 연산\r\n                wot.setSeconds(wot.getSeconds() - wit.getSeconds());// 초 부분끼리 연산\r\n\r\n                this.working.workingTime = wot.toString().substr(16, 8); // 연산된 값중 시간에 관련된 부분을 잘라서 저장\r\n                this.saveWorkingTime();// DB에 총 근무 시간 저장\r\n            },// End - calcWorkingTime()\r\n            /* eslint-enable no-console */\r\n        },// End - methods\r\n        mounted() {\r\n            // mounted 될 때 로그인이 되어있는 상태라면\r\n            if (sessionStorage.length > 0) { // 현재 sessionStorage에 요소가 존재하는 상태일 때(로그인이 되어서 sessionStorage에 저장된 상태일 때)\r\n                this.working.empId = sessionStorage.getItem(\"login_id\");// sessionStorage에서 사번 가져오기\r\n                this.readWorkingToday();// 출퇴근 기록 가져오기\r\n            }\r\n        }// End - mounted()\r\n    };// End - export default\r\n</script>\r\n\r\n<style>\r\n    .alignCenter {\r\n        text-align: center;\r\n    }\r\n    .mainWorking{\r\n        width: 15%;\r\n        height: 50%;\r\n        left: 15px;\r\n        top: 50%;\r\n        position: absolute;\r\n        border: 1px solid gray;\r\n    }\r\n</style>\r\n"]}]}