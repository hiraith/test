{"remainingRequest":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\src\\components\\approval\\SignHold.vue?vue&type=template&id=307316a8&scoped=true&","dependencies":[{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\src\\components\\approval\\SignHold.vue","mtime":1581058995810},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\UpfficeFront\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICBfYygiaDIiLCB7IHN0YXRpY1N0eWxlOiB7IGZsb2F0OiAibGVmdCIsICJtYXJnaW4tbGVmdCI6ICIyMDBweCIgfSB9LCBbCiAgICAgIF92bS5fdigi67O066WY66y47ISc7ZWoIikKICAgIF0pLAogICAgX3ZtLl92KCIgIiksCiAgICBfYygKICAgICAgImZvcm0iLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWlubGluZSBteS0yIG15LWxnLTAiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tYm90dG9tIjogIjJweCIgfQogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImZpZWxkc2V0IiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWN0LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAic2VsZWN0IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjdXN0b20tc2VsZWN0IiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgd2lkdGg6ICI3MHB4IiwKICAgICAgICAgICAgICAgICJtYXJnaW4tcmlnaHQiOiAiMTBweCIsCiAgICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICIxMHB4IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcmVxdWlyZWQ6ICIiIH0sCiAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0ID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZQogICAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgX3ZtLl9sKF92bS5zZWxlY3RlZCwgZnVuY3Rpb24odHlwZSwgaW5kZXgpIHsKICAgICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpbmRleCB9LCBbX3ZtLl92KF92bS5fcyh0eXBlKSldKQogICAgICAgICAgICB9KQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucXVlcnksCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicXVlcnkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCBtci1zbS0yIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAibWFyZ2luLXJpZ2h0IjogIjBweCAhaW1wb3J0YW50IiwKICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICIxMHB4IgogICAgICAgICAgICB9LAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIHBsYWNlaG9sZGVyOiAiU2VhcmNoIiB9LAogICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnF1ZXJ5IH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgX3ZtLnF1ZXJ5ID0gJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1zZWNvbmRhcnkgbXktMiBteS1zbS0wIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IjogIjBweCIsCiAgICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICIxMHB4ICFpbXBvcnRhbnQiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9LAogICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2VuZFF1ZXJ5IH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiU2VhcmNoXG4gICAgICAgICAgICAiKV0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdCiAgICApLAogICAgX3ZtLl92KCIgIiksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpc3Qgcm93IiB9LCBbX2MoInN1Yk1lbnUiKV0sIDEpLAogICAgX3ZtLl92KCIgIiksCiAgICBfYygidGFibGUiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUgdGFibGUtaG92ZXIiIH0sIFsKICAgICAgX3ZtLl9tKDApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInRib2R5IiwKICAgICAgICBfdm0uX2woX3ZtLmN1cnJlbnRQb3N0cywgZnVuY3Rpb24oYXBwLCBpbmRleCkgewogICAgICAgICAgcmV0dXJuIF9jKCJ0ciIsIHsga2V5OiBpbmRleCwgc3RhdGljQ2xhc3M6ICJ0YWJsZS1saWdodCIgfSwgWwogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhfdm0uY3VycmVudFBvc3RzLmxlbmd0aCAtIGluZGV4KSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKGFwcC5hcHBfd3JpdGVyX2RlcG5hbWUpKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdihfdm0uX3MoYXBwLmFwcF9kb2NfbnVtKSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKGFwcC5hcHBfdHlwZSkpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJob2xkLWRldGFpbHMiLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgYXBwUHJvcHM6IGFwcCwgaWQ6IGFwcC5hcHBfZG9jX251bSB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIlxuICAgICAgICAgICAgICAgICAgICAiICsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKGFwcC5hcHBfZG9jX3RpdGxlKSArCiAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KF92bS5fcyhhcHAuYXBwX3dyaXRlcl9uYW1lKSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoX3ZtLl9zKGFwcC5hcHBfZGF0ZSkpXSkKICAgICAgICAgIF0pCiAgICAgICAgfSkKICAgICAgKQogICAgXSksCiAgICBfdm0uX3YoIiAiKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicGFnaW5nIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJ1bCIsCiAgICAgICAgeyBzdGF0aWNDbGFzczogInBhZ2luYXRpb24iIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInBhZ2UtaXRlbSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhZ2UtbGluayIsCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLmdvdG9TdGFydCgpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIsKrIildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicGFnZS1pdGVtIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFnZS1saW5rIiwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0ucHJldigpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIjwiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF92bS5fbChfdm0uY3VycmVudFBhZ2VzLCBmdW5jdGlvbihwYWdlTnVtLCBpbmRleCkgewogICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYWdlLWl0ZW0iLAogICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZlOiBfdm0uaXNTZWxlY3RlZChpbmRleCkgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYWdlLWxpbmsiLAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jaGFuZ2VQYWdlKHBhZ2VOdW0pCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhwYWdlTnVtKSldCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogInBhZ2UtaXRlbSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInBhZ2UtbGluayIsCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLm5leHQoKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCI+IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAicGFnZS1pdGVtIiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAicGFnZS1saW5rIiwKICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uZ290b0VuZCgpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIsK7IildCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSwKICAgICAgICAyCiAgICAgICkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoZWFkIiwgWwogICAgICBfYygidHIiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUtcHJpbWFyeSIgfSwgWwogICAgICAgIF9jKCJ0aCIsIHsgYXR0cnM6IHsgc2NvcGU6ICJjb2wiIH0gfSwgW192bS5fdigiTm8iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0aCIsIHsgYXR0cnM6IHsgc2NvcGU6ICJjb2wiIH0gfSwgW192bS5fdigi67aA7IScIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGgiLCB7IGF0dHJzOiB7IHNjb3BlOiAiY29sIiB9IH0sIFtfdm0uX3YoIuusuOyEnOuyiO2YuCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRoIiwgeyBhdHRyczogeyBzY29wZTogImNvbCIgfSB9LCBbX3ZtLl92KCLsnKDtmJUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0aCIsIHsgYXR0cnM6IHsgc2NvcGU6ICJjb2wiIH0gfSwgW192bS5fdigi66y47ISc7KCc66qpIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGgiLCB7IGF0dHJzOiB7IHNjb3BlOiAiY29sIiB9IH0sIFtfdm0uX3YoIuq4sOyViOyekCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRoIiwgeyBhdHRyczogeyBzY29wZTogImNvbCIgfSB9LCBbX3ZtLl92KCLquLDslYjsnbwiKV0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}