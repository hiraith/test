{"remainingRequest":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ciz\\IdeaProjects\\test\\src\\components\\posts\\DeleteBoard.vue?vue&type=style&index=0&id=744a7bef&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\src\\components\\posts\\DeleteBoard.vue","mtime":1581408201650},{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ciz\\IdeaProjects\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmN1c3RvbS1zZWxlY3R7CiAgICB3aWR0aDogMzAlOwp9Cgo="},{"version":3,"sources":["DeleteBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;AACA","file":"DeleteBoard.vue","sourceRoot":"src/components/posts","sourcesContent":["<template>\r\n    <div>\r\n        <div>\r\n            <h4>부서 게시판 삭제</h4>\r\n            <subMenu></subMenu>\r\n        </div>\r\n        <div>\r\n        <ul>\r\n        <div>\r\n        <button type=\"button\" class=\"btn btn-primary btn-lg\" @click=\"getBoard\">부서 게시판 가져오기</button>\r\n        </div>\r\n\r\n            <p class=\"smalltext\" style=\"color: red; font-size: smaller\" >*클릭하여 게시판명을 가져오세요.</p>\r\n            <br><br>\r\n            <div>\r\n            <select class=\"custom-select\" v-model=\"selectBoard\">\r\n                <option disabled value=\"\">삭제할 게시판을 선택하세요</option>\r\n                <option v-for=\"(board,index) in boards\" :key=\"index\">\r\n                    {{board.board_name}}\r\n                </option>\r\n            </select>\r\n            </div>\r\n            <br>\r\n            <span>{{selectBoard}}</span>\r\n                <br>\r\n             <br>\r\n            <div>\r\n            <button class=\"btn btn-success\" type=\"button\" @click=\"deleteBoard\">삭제하기</button>\r\n            <button class=\"btn btn-success\" type=\"button\" @click=\"backlist\">돌아가기</button>\r\n            </div>\r\n        </ul>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import http from \"../../http-common\";\r\n    import PostSubmenu from \"./PostSubmenu\";\r\n\r\n    export default {\r\n        name: \"Delete-Board\",\r\n        data () {\r\n            return{\r\n                boards:[], //가져온 게시판을 배열로 저장.\r\n                dep_id: \"\", //부서번호에 해당하는 게시판만 가져오기 위해서\r\n                selectBoard:\"\",\r\n                board_name:\"\"\r\n            };\r\n        },\r\n        components: {\r\n            subMenu: PostSubmenu\r\n        },\r\n        methods:{\r\n            /* eslint-disable no-console */\r\n            //저장된 게시판 명을 가져오는 메서드\r\n            deleteBoard(){\r\n                    let result= confirm(\"게시판을 삭제하면 해당하는 게시글은 모두 삭제됩니다.\\n정말로 게시판을 삭제하시겠습니까?\")\r\n                    if(result){\r\n                     http\r\n                        .delete(\"/board/deleteBoard/\" + this.selectBoard)\r\n                        alert(\"게시판을 삭제하였씁니다.\")\r\n                        history.go(0);\r\n                    }else{\r\n                        // history.go(0);\r\n                    }\r\n                    console.log(this.selectBoard+\"<<<<<<<삭제할 게시물\")\r\n\r\n            },\r\n            getBoard(){\r\n                http\r\n                    .get(\"/board/getBoard/\" + this.dep_id)\r\n                    .then(response =>{\r\n                        this.boards=response.data;\r\n                        alert(\"게시판을 가져왔습니다!\\n삭제할 게시판을 선택하세요 !\")\r\n                    })\r\n\r\n            },\r\n\r\n\r\n            backlist(){\r\n                history.go(-1);\r\n            },\r\n\r\n            getEmpInfo(id) {    // 매개변수 id는 this.employee.emp_id 이다. : mounted()때 호출되는 메소드.\r\n                http\r\n                    .post(\"/mypage/\" + id)\r\n                    .then(response => {\r\n                        // 응답 데이터를 employee 데이터에 대입하기.\r\n                        this.dep_id = response.data.dep_id;\r\n                    })\r\n                    .catch(e => {\r\n                        /* eslint-disable no-console */\r\n                        console.log(e);\r\n                    });\r\n            },\r\n            writeCheck() {\r\n                let write_chk = location.href.indexOf(\"dep_pst\");  // dep_pst 가 포함되어 있으면 0(부서게시판) 이상의 숫자, 없으면 -1(전사게시판)\r\n                console.log(write_chk);\r\n                if(write_chk==-1) {\r\n                    // 현재 전사 게시판 선택 상태\r\n                    this.post_dep_id = 0;   //  post_dep_id 에 0넣기\r\n                } else {\r\n                    this.getEmpInfo(this.empID);    // empID로 사원정보 가져오기 : dep_id만 사용함\r\n\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            if (sessionStorage.length > 0) { // 현재 sessionStorage에 요소가 존재하는 상태일 때(로그인이 되어서 sessionStorage에 저장된 상태일 때)\r\n                this.empID = sessionStorage.getItem(\"login_id\"); // 이 컴포넌트에 선언된 empID 변수에 현재 로그인한 사번 넣기\r\n                // this.getName(this.empID);   // empID로 사원명 가져오는 메소드 호출\r\n                this.getEmpInfo(this.empID);\r\n\r\n            } else {\r\n                this.$router.push(\"/\");\r\n            }\r\n        },\r\n        updated() {\r\n            this.writeCheck();\r\n        }\r\n\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .custom-select{\r\n        width: 30%;\r\n    }\r\n\r\n</style>"]}]}